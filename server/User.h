#ifndef USER_H_INCLUDED
#define USER_H_INCLUDED

#include <array>
#include <string>
#include <vector>

/**
 * @file User.h
 * @author Daniel Mierswa <daniel.mierswa@student.hs-rm.de>
 *
 * Interface and common symbols for the user implementation.
 */

class User
{
public:
	typedef std::array<char, 20> password_hash_t;

	/**
	 * Check credentials of a user.
	 *
	 * @param name The name the user is referenced by.
	 * @param password_hash The password SHA-1 hash that was generated.
	 */
	static void check(std::string const &name, password_hash_t const &password_hash);

	/**
	 * Create a user in the database with the specified name and password hash.
	 * The password hash can be generated by the hash_bytes member function.
	 *
	 * @param name The name the user is referenced by.
	 * @param password_hash The password SHA-1 hash that was generated.
	 */
	static void create(std::string const &name, password_hash_t const &password_hash);

	/**
	 * Delete a user in the database with the specified name.
	 *
	 * @param Name The name the user is referenced by.
	 */
	static void remove(std::string const &name);

	/**
	 * Create a hash for the specificied byte sequence.
	 *
	 * @param bytes A sequence of bytes as data input for the hash algorithm.
	 * @return The hash sequence for the specified bytes.
	 */
	static password_hash_t hash_bytes(std::vector<char> const &bytes);
};

#endif
